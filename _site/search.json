[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Quarto Deployment Process: Two Types",
    "section": "",
    "text": "flowchart TD\n    A[Start] --&gt; B[Create GitHub Repo DSCI521_website-test on GitHub]\n    B --&gt; C[Clone Repo Locally: git clone repo_url]\n    C --&gt; D[Create Quarto Project: quarto create project DSCI521_website-test]\n    D --&gt; E[Preview Project Locally: quarto preview]\n    E --&gt; F[Render Site: quarto render]\n    F --&gt; G[Add, Commit, and Push Changes: git add, commit, push]\n    G --&gt; H[Go to GitHub Pages Settings: DSCI521_website-test/settings/pages]\n\n    H --&gt; Q[Type 1: Publish with DOCs folder]\n    Q --&gt; I[Set GitHub Pages Source to Main Branch and Root]\n    I --&gt; J[GitHub Pages Renders README.md by Default]\n    J --&gt; K[Create Root Directory for Site]\n    K --&gt; L[Modify _quarto.yml to Set output-dir to output docs]\n    L --&gt; M[Move Rendered Files to docs or Re-Render]\n    M --&gt; N[Go to GitHub Pages Settings: Select docs as the Source]\n    N --&gt; O[Check the Deployed Website]\n\n    H --&gt; P[Type 2: Publish with gh-pages Branch]\n    P --&gt; R[Change Branch Deployment to None in GitHub Pages Settings]\n    R --&gt; S[Run: quarto publish to gh-pages]\n    S --&gt; T[Make Changes, Add, Commit, and Push Updates]\n    T --&gt; U[If Not Deployed Automatically]\n    U --&gt; V[Manually Set GitHub Pages to gh-pages Branch]\n    U --&gt; W[Re-run: quarto publish to Ensure Deployment]\n  \n\n\n\n\n\n\nhttps://quarto.org/docs/authoring/callouts.html\n\n\n\n\n\n\nTip 1: Tip with Title\n\n\n\nThis is an example of a callout with a title.\n\n\nSee Tip 1…"
  },
  {
    "objectID": "about.html#quarto-deployment-process-flowchart",
    "href": "about.html#quarto-deployment-process-flowchart",
    "title": "Quarto Deployment Process: Two Types",
    "section": "",
    "text": "flowchart TD\n    A[Start] --&gt; B[Create GitHub Repo DSCI521_website-test on GitHub]\n    B --&gt; C[Clone Repo Locally: git clone repo_url]\n    C --&gt; D[Create Quarto Project: quarto create project DSCI521_website-test]\n    D --&gt; E[Preview Project Locally: quarto preview]\n    E --&gt; F[Render Site: quarto render]\n    F --&gt; G[Add, Commit, and Push Changes: git add, commit, push]\n    G --&gt; H[Go to GitHub Pages Settings: DSCI521_website-test/settings/pages]\n\n    H --&gt; Q[Type 1: Publish with DOCs folder]\n    Q --&gt; I[Set GitHub Pages Source to Main Branch and Root]\n    I --&gt; J[GitHub Pages Renders README.md by Default]\n    J --&gt; K[Create Root Directory for Site]\n    K --&gt; L[Modify _quarto.yml to Set output-dir to output docs]\n    L --&gt; M[Move Rendered Files to docs or Re-Render]\n    M --&gt; N[Go to GitHub Pages Settings: Select docs as the Source]\n    N --&gt; O[Check the Deployed Website]\n\n    H --&gt; P[Type 2: Publish with gh-pages Branch]\n    P --&gt; R[Change Branch Deployment to None in GitHub Pages Settings]\n    R --&gt; S[Run: quarto publish to gh-pages]\n    S --&gt; T[Make Changes, Add, Commit, and Push Updates]\n    T --&gt; U[If Not Deployed Automatically]\n    U --&gt; V[Manually Set GitHub Pages to gh-pages Branch]\n    U --&gt; W[Re-run: quarto publish to Ensure Deployment]\n  \n\n\n\n\n\n\nhttps://quarto.org/docs/authoring/callouts.html\n\n\n\n\n\n\nTip 1: Tip with Title\n\n\n\nThis is an example of a callout with a title.\n\n\nSee Tip 1…"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSCI521_website-test",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "Slides.html#hello",
    "href": "Slides.html#hello",
    "title": "R Markdown Slides",
    "section": "Hello",
    "text": "Hello"
  },
  {
    "objectID": "Slides.html",
    "href": "Slides.html",
    "title": "Presentation with Xaringan & Revealjs",
    "section": "",
    "text": "Slide 1: Introduction\nWelcome to the presentation using both xaringan and revealjs.\n\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-2.1415 -0.9667 -0.3530 -0.2081  0.5894  2.2499 \n\n\n\nSlide 3: Bullets & Incremental Display\n\nPoint 1\nPoint 2\nPoint 3\n\nSub-point 1\nSub-point 2\nSub-point 3\n\n\n\n\n\nSlide 4: Tables\n\n\n\nName\nAge\nOccupation\n\n\n\n\nAlice\n25\nData Scientist\n\n\nBob\n30\nStatistician\n\n\nCharlie\n35\nProfessor\n\n\n\n\n\nSlide 5: M\nath Equations\n\\[\nE = mc^2\n\\]\n\n\nSlide 6: Highlighting & Quotes\n\n“This is a block quote.”\n\n```r # This is some highlighted code x &lt;- seq(1, 10)\n\n```markdown # Slide 7: Images\n\n\n\nSlide 8: Columns (Revealjs Only)\n\n\n\nThis is the left column\n\n\n\nThis is the right column\n\n\n\n\n\nSlide 9: Background Image (Xaringan Only)\nxaringanExtra::use_tile_view() xaringanExtra::use_share_again()\n\n\nSlide 10: Transition Effects\n\nThis slide has a fade transition.\nYou can change it to slide, convex, concave, etc.\n\n\n\nSlide 11: Interactivity (HTML Widgets)\nlibrary(plotly) plot_ly(data = iris, x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species)\n\n\nSlide 12: Conclusion\nThat’s a wrap! This presentation covered various elements using xaringan and revealjs.\n\nInstructions for Use\n\nSave the code above as test_presentation.Rmd.\nOpen this file in RStudio.\nTo switch between xaringan and revealjs:\n\nFor xaringan, ensure the output is set to xaringan::moon_reader.\nFor revealjs, change the output to revealjs::revealjs_presentation.\n\n\nNow, all the content from slides 3 to 12 is placed within proper code blocks to render correctly in the final presentation."
  },
  {
    "objectID": "anlaysis/test2.html",
    "href": "anlaysis/test2.html",
    "title": "Test",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n[1] 0.1864175"
  },
  {
    "objectID": "anlaysis/test2.html#r-markdown",
    "href": "anlaysis/test2.html#r-markdown",
    "title": "Test",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n[1] 0.1864175"
  },
  {
    "objectID": "xarrigan.html",
    "href": "xarrigan.html",
    "title": "Presentation Ninja",
    "section": "",
    "text": "background-image: url(https://upload.wikimedia.org/wikipedia/commons/b/be/Sharingan_triple.svg)\n???\nImage credit: Wikimedia Commons\nclass: inverse, center, middle\n\nGet Started\n\n\n\nHello World\nInstall the xaringan package from Github:\n\nremotes::install_github(\"yihui/xaringan\")\n\n–\nYou are recommended to use the RStudio IDE, but you do not have to.\n\nCreate a new R Markdown document from the menu File -&gt; New File -&gt; R Markdown -&gt; From Template -&gt; Ninja Presentation;1\n\n–\n\nClick the Knit button to compile it;\n\n–\n\nor use the RStudio Addin2 “Infinite Moon Reader” to live preview the slides (every time you update and save the Rmd document, the slides will be automatically reloaded in RStudio Viewer.\n\n.footnote[ [1] 中文用户请看这份教程\n[2] See #2 if you do not see the template or addin in RStudio. ]\n\n\nHello Ninja\nAs a presentation ninja, you certainly should not be satisfied by the “Hello World” example. You need to understand more about two things:\n\nThe remark.js library;\nThe xaringan package;\n\nBasically xaringan injected the chakra of R Markdown (minus Pandoc) into remark.js. The slides are rendered by remark.js in the web browser, and the Markdown source needed by remark.js is generated from R Markdown (knitr).\n\n\n\nremark.js\nYou can see an introduction of remark.js from its homepage. You should read the remark.js Wiki at least once to know how to\n\ncreate a new slide (Markdown syntax* and slide properties);\nformat a slide (e.g. text alignment);\nconfigure the slideshow;\nand use the presentation (keyboard shortcuts).\n\nIt is important to be familiar with remark.js before you can understand the options in xaringan.\n.footnote[[*] It is different with Pandoc’s Markdown! It is limited but should be enough for presentation purposes. Come on… You do not need a slide for the Table of Contents! Well, the Markdown support in remark.js may be improved in the future.]\nclass: inverse, middle, center\n\n\nUsing xaringan\n\n\n\nxaringan\nProvides an R Markdown output format xaringan::moon_reader as a wrapper for remark.js, and you can use it in the YAML metadata, e.g.\n---\ntitle: \"A Cool Presentation\"\noutput:\n  xaringan::moon_reader:\n    yolo: true\n    nature:\n      autoplay: 30000\n---\nSee the help page ?xaringan::moon_reader for all possible options that you can use.\n\n\n\nremark.js vs xaringan\nSome differences between using remark.js (left) and using xaringan (right):\n.pull-left[ 1. Start with a boilerplate HTML file;\n\nPlain Markdown;\nWrite JavaScript to autoplay slides;\nManually configure MathJax;\nHighlight code with *;\nEdit Markdown source and refresh browser to see updated slides; ]\n\n.pull-right[ 1. Start with an R Markdown document;\n\nR Markdown (can embed R/other code chunks);\nProvide an option autoplay;\nMathJax just works;*\nHighlight code with {{}};\nThe RStudio addin “Infinite Moon Reader” automatically refreshes slides on changes; ]\n\n.footnote[[*] Not really. See next page.]\n\n\n\nMath Expressions\nYou can write LaTeX math expressions inside a pair of dollar signs, e.g. $+$ renders \\(\\alpha+\\beta\\). You can use the display style with double dollar signs:\n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n\\[\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i\\]\nLimitations:\n\nThe source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting $$ must appear in the very beginning of a line, followed immediately by a non-space character, and the ending $$ must be at the end of a line, led by a non-space character;\nThere should not be spaces after the opening $ or before the closing $.\nMath does not work on the title slide (see #61 for a workaround).\n\n\n\n\nR Code\n\n# a boring regression\nfit = lm(dist ~ 1 + speed, data = cars)\ncoef(summary(fit))\n\n#               Estimate Std. Error   t value     Pr(&gt;|t|)\n# (Intercept) -17.579095  6.7584402 -2.601058 1.231882e-02\n# speed         3.932409  0.4155128  9.463990 1.489836e-12\n\ndojutsu = c('地爆天星', '天照', '加具土命', '神威', '須佐能乎', '無限月読')\ngrep('天', dojutsu, value = TRUE)\n\n# [1] \"地爆天星\" \"天照\"\n\n\n\n\n\nR Plots\n\npar(mar = c(4, 4, 1, .1))\nplot(cars, pch = 19, col = 'darkgray', las = 1)\nabline(fit, lwd = 2)\n\n\n\n\n\n\n\n\n\n\n\nTables\nIf you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,\n\nknitr::kable(head(iris), format = 'html')\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n\n\n\n\n\n\n\nHTML Widgets\nI have not thoroughly tested HTML widgets against xaringan. Some may work well, and some may not. It is a little tricky.\nSimilarly, the Shiny mode (runtime: shiny) does not work. I might get these issues fixed in the future, but these are not of high priority to me. I never turn my presentation into a Shiny app. When I need to demonstrate more complicated examples, I just launch them separately. It is convenient to share slides with other people when they are plain HTML/JS applications.\nSee the next page for two HTML widgets.\n\n\nlibrary(leaflet)\nleaflet() %&gt;% addTiles() %&gt;% setView(-93.65, 42.0285, zoom = 17)\n\n\n\nDT::datatable(\n  head(iris, 10),\n  fillContainer = FALSE, options = list(pageLength = 8)\n)\n\n\n\n\nSome Tips\n\nDo not forget to try the yolo option of xaringan::moon_reader.\noutput:\n  xaringan::moon_reader:\n    yolo: true\n\n\n\n\nSome Tips\n\nSlides can be automatically played if you set the autoplay option under nature, e.g. go to the next slide every 30 seconds in a lightning talk:\noutput:\n  xaringan::moon_reader:\n    nature:\n      autoplay: 30000\nIf you want to restart the play after it reaches the last slide, you may set the sub-option loop to TRUE, e.g.,\noutput:\n  xaringan::moon_reader:\n    nature:\n      autoplay:\n        interval: 30000\n        loop: true\n\n\n\n\nSome Tips\n\nA countdown timer can be added to every page of the slides using the countdown option under nature, e.g. if you want to spend one minute on every page when you give the talk, you can set:\noutput:\n  xaringan::moon_reader:\n    nature:\n      countdown: 60000\nThen you will see a timer counting down from 01:00, to 00:59, 00:58, … When the time is out, the timer will continue but the time turns red.\n\n\n\n\nSome Tips\n\nThe title slide is created automatically by xaringan, but it is just another remark.js slide added before your other slides.\nThe title slide is set to class: center, middle, inverse, title-slide by default. You can change the classes applied to the title slide with the titleSlideClass option of nature (title-slide is always applied).\noutput:\n  xaringan::moon_reader:\n    nature:\n      titleSlideClass: [top, left, inverse]\n\n–\n\nIf you’d like to create your own title slide, disable xaringan’s title slide with the seal = FALSE option of moon_reader.\noutput:\n  xaringan::moon_reader:\n    seal: false\n\n\n\n\nSome Tips\n\nThere are several ways to build incremental slides. See this presentation for examples.\nThe option highlightLines: true of nature will highlight code lines that start with *, or are wrapped in { }, or have trailing comments #&lt;&lt;;\noutput:\n  xaringan::moon_reader:\n    nature:\n      highlightLines: true\nSee examples on the next page.\n\n\n\n\nSome Tips\n.pull-left[ An example using a leading *:\n```r\nif (TRUE) {\n** message(\"Very important!\")\n}\n```\nOutput:\nif (TRUE) {\n* message(\"Very important!\")\n}\nThis is invalid R code, so it is a plain fenced code block that is not executed. ]\n.pull-right[ An example using {{}}:\n```{r tidy=FALSE}\nif (TRUE) {\n*{{ message(\"Very important!\") }}\n}\n```\nOutput:\n\nif (TRUE) {\n{{ message(\"Very important!\") }}\n}\n\nVery important!\n\n\nIt is valid R code so you can run it. Note that {{}} can wrap an R expression of multiple lines. ]\n\n\n\nSome Tips\nAn example of using the trailing comment #&lt;&lt; to highlight lines:\n```{r tidy=FALSE}\nlibrary(ggplot2)\nggplot(mtcars) + \n  aes(mpg, disp) + \n  geom_point() +   #&lt;&lt;\n  geom_smooth()    #&lt;&lt;\n```\nOutput:\n\nlibrary(ggplot2)\nggplot(mtcars) + \n  aes(mpg, disp) + \n  geom_point() +   #&lt;&lt;\n  geom_smooth()    #&lt;&lt;\n\n\n\n\nSome Tips\nWhen you enable line-highlighting, you can also use the chunk option highlight.output to highlight specific lines of the text output from a code chunk. For example, highlight.output = TRUE means highlighting all lines, and highlight.output = c(1, 3) means highlighting the first and third line.\n```{r, highlight.output=c(1, 3)}\nhead(iris)\n```\n\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nQuestion: what does highlight.output = c(TRUE, FALSE) mean? (Hint: think about R’s recycling of vectors)\n\n\n\nSome Tips\n\nTo make slides work offline, you need to download a copy of remark.js in advance, because xaringan uses the online version by default (see the help page ?xaringan::moon_reader).\nYou can use xaringan::summon_remark() to download the latest or a specified version of remark.js. By default, it is downloaded to libs/remark-latest.min.js.\nThen change the chakra option in YAML to point to this file, e.g.\noutput:\n  xaringan::moon_reader:\n    chakra: libs/remark-latest.min.js\nIf you used Google fonts in slides (the default theme uses Yanone Kaffeesatz, Droid Serif, and Source Code Pro), they won’t work offline unless you download or install them locally. The Heroku app google-webfonts-helper can help you download fonts and generate the necessary CSS.\n\n\n\n\nMacros\n\nremark.js allows users to define custom macros (JS functions) that can be applied to Markdown text using the syntax ![:macroName arg1, arg2, ...] or ![:macroName arg1, arg2, ...](this). For example, before remark.js initializes the slides, you can define a macro named scale:\nremark.macros.scale = function (percentage) {\n  var url = this;\n  return '&lt;img src=\"' + url + '\" style=\"width: ' + percentage + '\" /&gt;';\n};\nThen the Markdown text\n![:scale 50%](image.jpg)\nwill be translated to\n&lt;img src=\"image.jpg\" style=\"width: 50%\" /&gt;\n\n\n\n\nMacros (continued)\n\nTo insert macros in xaringan slides, you can use the option beforeInit under the option nature, e.g.,\noutput:\n  xaringan::moon_reader:\n    nature:\n      beforeInit: \"macros.js\"\nYou save your remark.js macros in the file macros.js.\nThe beforeInit option can be used to insert arbitrary JS code before remark.create(). Inserting macros is just one of its possible applications.\n\n\n\n\nCSS\nAmong all options in xaringan::moon_reader, the most challenging but perhaps also the most rewarding one is css, because it allows you to customize the appearance of your slides using any CSS rules or hacks you know.\nYou can see the default CSS file here. You can completely replace it with your own CSS files, or define new rules to override the default. See the help page ?xaringan::moon_reader for more information.\n\n\n\nCSS\nFor example, suppose you want to change the font for code from the default “Source Code Pro” to “Ubuntu Mono”. You can create a CSS file named, say, ubuntu-mono.css:\n@import url(https://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700,400italic);\n\n.remark-code, .remark-inline-code { font-family: 'Ubuntu Mono'; }\nThen set the css option in the YAML metadata:\noutput:\n  xaringan::moon_reader:\n    css: [\"default\", \"ubuntu-mono.css\"]\nHere I assume ubuntu-mono.css is under the same directory as your Rmd.\nSee yihui/xaringan#83 for an example of using the Fira Code font, which supports ligatures in program code.\n\n\n\nCSS (with Sass)\nxaringan also supports Sass support via rmarkdown. Suppose you want to use the same color for different elements, e.g., first heading and bold text. You can create a .scss file, say mytheme.scss, using the sass syntax with variables:\n$mycolor: #ff0000; \n.remark-slide-content &gt; h1 { color: $mycolor; }\n.remark-slide-content strong { color: $mycolor; }\nThen set the css option in the YAML metadata using this file placed under the same directory as your Rmd:\noutput:\n  xaringan::moon_reader:\n    css: [\"default\", \"mytheme.scss\"]\nThis requires rmarkdown &gt;= 2.8 and the sass package. You can learn more about rmarkdown and sass support in this blog post and in sass overview vignette.\n\n\n\nThemes\nDon’t want to learn CSS? Okay, you can use some user-contributed themes. A theme typically consists of two CSS files foo.css and foo-fonts.css, where foo is the theme name. Below are some existing themes:\n\nnames(xaringan:::list_css())\n\n [1] \"chocolate-fonts\"  \"chocolate\"        \"default-fonts\"   \n [4] \"default\"          \"duke-blue\"        \"fc-fonts\"        \n [7] \"fc\"               \"glasgow_template\" \"hygge-duke\"      \n[10] \"hygge\"            \"ki-fonts\"         \"ki\"              \n[13] \"kunoichi\"         \"lucy-fonts\"       \"lucy\"            \n[16] \"metropolis-fonts\" \"metropolis\"       \"middlebury-fonts\"\n[19] \"middlebury\"       \"nhsr-fonts\"       \"nhsr\"            \n[22] \"ninjutsu\"         \"rladies-fonts\"    \"rladies\"         \n[25] \"robot-fonts\"      \"robot\"            \"rutgers-fonts\"   \n[28] \"rutgers\"          \"shinobi\"          \"tamu-fonts\"      \n[31] \"tamu\"             \"uio-fonts\"        \"uio\"             \n[34] \"uo-fonts\"         \"uo\"               \"uol-fonts\"       \n[37] \"uol\"              \"useR-fonts\"       \"useR\"            \n[40] \"uwm-fonts\"        \"uwm\"              \"wic-fonts\"       \n[43] \"wic\"             \n\n\n\n\n\nThemes\nTo use a theme, you can specify the css option as an array of CSS filenames (without the .css extensions), e.g.,\noutput:\n  xaringan::moon_reader:\n    css: [default, metropolis, metropolis-fonts]\nIf you want to contribute a theme to xaringan, please read this blog post.\nbackground-image: url(https://upload.wikimedia.org/wikipedia/commons/b/be/Sharingan_triple.svg) background-size: 100px background-position: 90% 8%\n\n\nSharingan\nThe R package name xaringan was derived1 from Sharingan, a dōjutsu in the Japanese anime Naruto with two abilities:\n\nthe “Eye of Insight”\nthe “Eye of Hypnotism”\n\nI think a presentation is basically a way to communicate insights to the audience, and a great presentation may even “hypnotize” the audience.2,3\n.footnote[ [1] In Chinese, the pronounciation of X is Sh /ʃ/ (as in shrimp). Now you should have a better idea of how to pronounce my last name Xie.\n[2] By comparison, bad presentations only put the audience to sleep.\n[3] Personally I find that setting background images for slides is a killer feature of remark.js. It is an effective way to bring visual impact into your presentations. ]\n\n\n\nNaruto terminology\nThe xaringan package borrowed a few terms from Naruto, such as\n\nSharingan (写輪眼; the package name)\nThe moon reader (月読; an attractive R Markdown output format)\nChakra (查克拉; the path to the remark.js library, which is the power to drive the presentation)\nNature transformation (性質変化; transform the chakra by setting different options)\nThe infinite moon reader (無限月読; start a local web server to continuously serve your slides)\nThe summoning technique (download remark.js from the web)\n\nYou can click the links to know more about them if you want. The jutsu “Moon Reader” may seem a little evil, but that does not mean your slides are evil.\n\nclass: center\n\n\nHand seals (印)\nPress h or ? to see the possible ninjutsu you can use in remark.js.\n\n\nclass: center, middle\n\n\nThanks!\nSlides created via the R package xaringan.\nThe chakra comes from remark.js, knitr, and R Markdown."
  },
  {
    "objectID": "jupytertest/Untitled.html",
    "href": "jupytertest/Untitled.html",
    "title": "DSCI521_website-test",
    "section": "",
    "text": "pwd\n\n'/Users/andytai/Library/Mobile Documents/com~apple~CloudDocs/Documents/github/mds/DSCI521_website-test'\n\n\n\npwd\n\n'/Users/andytai/Library/Mobile Documents/com~apple~CloudDocs/Documents/github/mds/DSCI521_website-test'"
  },
  {
    "objectID": "Analysis1.html",
    "href": "Analysis1.html",
    "title": "Analysis 1",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\nHumptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text.\nHumptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text. Humptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text. Humptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text. Humptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text. Humptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text. Humptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text.\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "Analysis1.html#r-markdown",
    "href": "Analysis1.html#r-markdown",
    "title": "Analysis 1",
    "section": "",
    "text": "This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\nHumptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text.\nHumptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text. Humptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text. Humptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text. Humptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text. Humptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text. Humptpy Dumpty sat on a wall, humpty dumpty had a great fall. So this can be a huge paragarph of text.\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00"
  },
  {
    "objectID": "Analysis1.html#including-plots",
    "href": "Analysis1.html#including-plots",
    "title": "Analysis 1",
    "section": "Including Plots",
    "text": "Including Plots\nYou can also embed plots, for example:\n\n\n\n\n\n\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot."
  }
]